//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/Scripts/Inputs/InputController.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @InputController: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @InputController()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""InputController"",
    ""maps"": [
        {
            ""name"": ""Swimming"",
            ""id"": ""25749fcf-47aa-4ad0-916d-dcd684f3654c"",
            ""actions"": [
                {
                    ""name"": ""Move"",
                    ""type"": ""Value"",
                    ""id"": ""5f884673-1ba1-4d6b-ad88-49eb7e6d9bbe"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Look"",
                    ""type"": ""Value"",
                    ""id"": ""6cc70288-07a2-48c6-9319-30cde3a73bff"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""DiveDown"",
                    ""type"": ""Button"",
                    ""id"": ""732d02a8-30d2-4509-89ff-7246f7a657e9"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""DiveUp"",
                    ""type"": ""Button"",
                    ""id"": ""7ddb1754-29dc-483c-a22e-ced40d34988e"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""1dd655b1-d8b7-40cd-a11e-66e28ea380ad"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""53aa871e-68eb-4f41-b192-d8418cb3dfc5"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""781d448a-1f42-4ad8-9322-5a6661cbeb2f"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""8656addb-debf-460b-b67c-8495f4ecd2a0"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""e9a2109e-c067-403f-8290-a5b9fb0e7076"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""99211701-b3fc-4eea-b16d-8eb2faec183d"",
                    ""path"": ""<Pointer>/delta"",
                    ""interactions"": """",
                    ""processors"": ""InvertVector2(invertX=false),ScaleVector2(x=0.05,y=0.05)"",
                    ""groups"": """",
                    ""action"": ""Look"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""1e13c20c-6273-41ef-a2de-ec4b0b00294b"",
                    ""path"": ""<Gamepad>/rightStick"",
                    ""interactions"": """",
                    ""processors"": ""InvertVector2(invertX=false),StickDeadzone,ScaleVector2(x=300,y=300)"",
                    ""groups"": """",
                    ""action"": ""Look"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""dd2cfe9c-5a99-4ad0-8fe4-6bdf5126aca1"",
                    ""path"": ""<Keyboard>/ctrl"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""DiveDown"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""b244da69-5365-42d5-bd48-c0197682e5e5"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""DiveUp"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Swimming
        m_Swimming = asset.FindActionMap("Swimming", throwIfNotFound: true);
        m_Swimming_Move = m_Swimming.FindAction("Move", throwIfNotFound: true);
        m_Swimming_Look = m_Swimming.FindAction("Look", throwIfNotFound: true);
        m_Swimming_DiveDown = m_Swimming.FindAction("DiveDown", throwIfNotFound: true);
        m_Swimming_DiveUp = m_Swimming.FindAction("DiveUp", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Swimming
    private readonly InputActionMap m_Swimming;
    private List<ISwimmingActions> m_SwimmingActionsCallbackInterfaces = new List<ISwimmingActions>();
    private readonly InputAction m_Swimming_Move;
    private readonly InputAction m_Swimming_Look;
    private readonly InputAction m_Swimming_DiveDown;
    private readonly InputAction m_Swimming_DiveUp;
    public struct SwimmingActions
    {
        private @InputController m_Wrapper;
        public SwimmingActions(@InputController wrapper) { m_Wrapper = wrapper; }
        public InputAction @Move => m_Wrapper.m_Swimming_Move;
        public InputAction @Look => m_Wrapper.m_Swimming_Look;
        public InputAction @DiveDown => m_Wrapper.m_Swimming_DiveDown;
        public InputAction @DiveUp => m_Wrapper.m_Swimming_DiveUp;
        public InputActionMap Get() { return m_Wrapper.m_Swimming; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(SwimmingActions set) { return set.Get(); }
        public void AddCallbacks(ISwimmingActions instance)
        {
            if (instance == null || m_Wrapper.m_SwimmingActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_SwimmingActionsCallbackInterfaces.Add(instance);
            @Move.started += instance.OnMove;
            @Move.performed += instance.OnMove;
            @Move.canceled += instance.OnMove;
            @Look.started += instance.OnLook;
            @Look.performed += instance.OnLook;
            @Look.canceled += instance.OnLook;
            @DiveDown.started += instance.OnDiveDown;
            @DiveDown.performed += instance.OnDiveDown;
            @DiveDown.canceled += instance.OnDiveDown;
            @DiveUp.started += instance.OnDiveUp;
            @DiveUp.performed += instance.OnDiveUp;
            @DiveUp.canceled += instance.OnDiveUp;
        }

        private void UnregisterCallbacks(ISwimmingActions instance)
        {
            @Move.started -= instance.OnMove;
            @Move.performed -= instance.OnMove;
            @Move.canceled -= instance.OnMove;
            @Look.started -= instance.OnLook;
            @Look.performed -= instance.OnLook;
            @Look.canceled -= instance.OnLook;
            @DiveDown.started -= instance.OnDiveDown;
            @DiveDown.performed -= instance.OnDiveDown;
            @DiveDown.canceled -= instance.OnDiveDown;
            @DiveUp.started -= instance.OnDiveUp;
            @DiveUp.performed -= instance.OnDiveUp;
            @DiveUp.canceled -= instance.OnDiveUp;
        }

        public void RemoveCallbacks(ISwimmingActions instance)
        {
            if (m_Wrapper.m_SwimmingActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(ISwimmingActions instance)
        {
            foreach (var item in m_Wrapper.m_SwimmingActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_SwimmingActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public SwimmingActions @Swimming => new SwimmingActions(this);
    public interface ISwimmingActions
    {
        void OnMove(InputAction.CallbackContext context);
        void OnLook(InputAction.CallbackContext context);
        void OnDiveDown(InputAction.CallbackContext context);
        void OnDiveUp(InputAction.CallbackContext context);
    }
}
